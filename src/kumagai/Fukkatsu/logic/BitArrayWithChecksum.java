package kumagai.Fukkatsu.logic;

/**
 * チェックサムを伴うビット配列。
 * @author kumagai
 */
public class BitArrayWithChecksum
	extends BitArray
{
	/**
	 * チェックコード計算用マジックナンバー
	 */
	static private int[] magicNumber =
	{
		0x88, 0xc4, 0x62, 0x31, 0x08, 0x84, 0x42, 0x21,
		0x98, 0xcc, 0xe6, 0x73, 0xa9, 0xc4, 0x62, 0x31,
		0x5a, 0xad, 0xc6, 0x63, 0xa1, 0xc0, 0x60, 0x30,
		0x38, 0x9c, 0x4e, 0xa7, 0xc3, 0xf1, 0x68, 0xb4,
		0xd0, 0x68, 0xb4, 0x5a, 0x2d, 0x06, 0x83, 0x51,
		0x20, 0x10, 0x08, 0x84, 0x42, 0xa1, 0x40, 0xa0,
		0xf9, 0xec, 0xf6, 0x7b, 0xad, 0xc6, 0xe3, 0x61,
		0x81, 0xd0, 0x68, 0xb4, 0xda, 0x6d, 0xa6, 0xd3,
		0xb2, 0xd9, 0xfc, 0xfe, 0xff, 0xef, 0x67, 0x23,
		0x34, 0x1a, 0x0d, 0x96, 0x4b, 0x35, 0x8a, 0x45,
		0xaa, 0xd5, 0x7a, 0x3d, 0x8e, 0x47, 0xb3, 0x49,
		0xa1, 0x40, 0xa0, 0x50, 0xa8, 0xd4, 0xea, 0x75,
		0xa0, 0xd0, 0x68, 0xb4, 0x5a, 0xad, 0xc6, 0x63,
		0x7e, 0xbf, 0xcf, 0xf7, 0x6b, 0xa5, 0xc2, 0x61,
	};

	/**
	 * ゲームデータを受けてチェックサムを加算・追加してオブジェクトを構築。
	 * @param bitArray ゲームデータ
	 */
	public BitArrayWithChecksum(BitArray bitArray)
	{
		super(8 * 15);

		for (int i=0 ; i<bitArray.getBitValue().length ; i++)
		{
			bits[i] = bitArray.getBitValue()[i];
		}

		set(new BitPosition(14, 0), new BitArray(getChecksum(), 0, 8));
	}

	/**
	 * 呪文コードデータを受けてオブジェクトを構築。
	 * @param data8bit 呪文コードデータ
	 */
	public BitArrayWithChecksum(byte [] data8bit)
	{
		super(8 * 15);

		for (int i=0 ; i<15 ; i++)
		{
			set(new BitPosition(i, 0), new BitArray(data8bit[i], 0, 8));
		}
	}

	/**
	 * チェックサムを生成・返却する。
	 * @return チェックサム
	 */
	public int getChecksum()
	{
		int sum = getByte(14, 0, 8);

		for (int i=0 ; i<14 ; i++)
		{
			for (int j=0 ; j<8 ; j++)
			{
				if (getBitValue()[i * 8 + (7 - j)])
				{
					// そのビットは true である。

					sum ^= magicNumber[i * 8 + j];
				}
			}
		}

		return sum;
	}
}
